generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  TICKET_PAYMENT
  WALLET_FUNDING
  CREDIT_TRANSFER
}

enum TransactionFlowType {
  INFLOW
  OUTFLOW
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  email    String  @unique
  name     String?
  phone    String  @unique
  password String

  wallet       Wallet?
  transactions Transaction[]
  tickets      Ticket[]

  @@map("users")
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balance Float @default(0)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @unique
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reference String
  amount    Float  @default(0.0)

  meta Json?

  type        TransactionType
  description String               @default("Transaction")
  flow        TransactionFlowType?
  status      TransactionStatus    @default(PENDING)

  wallet   Wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String?

  ticket   Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String?

  @@map("transactions")
}

model Ticket {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price  Float   @default(0.0)
  isPaid Boolean @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]

  @@map("tickets")
}
